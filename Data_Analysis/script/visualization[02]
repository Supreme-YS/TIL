{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy  as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 한글 폰트 문제 해결\n",
    "import platform\n",
    "\n",
    "from matplotlib import font_manager, rc\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "if platform.system() == 'Darwin':\n",
    "    rc('font', family='AppleGothic')\n",
    "elif platform.system() == 'Windows':\n",
    "    path = \"c:/Windows/Fonts/malgun.ttf\"\n",
    "    font_name = font_manager.FontProperties(fname=path).get_name()\n",
    "    rc('font', family=font_name)\n",
    "else:\n",
    "    print('Unknown system... sorry~~~~') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- pie chart : 카테고리별 값의 상대적인 비교"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = ['뽕사부' , '순대국밥' , '개구리비빔밥' , '생고기' , '지하철버거']\n",
    "datas  = [15, 15, 20, 25, 25]\n",
    "colors = ['gold' , 'blue' , 'red' , 'yellow' , 'green']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "\n",
    "plt.pie(datas , labels = labels , colors = colors , shadow=True , autopct='%1.1f%%')\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "pieDF = pd.read_csv('./data/auto-mpg.csv' , header=None)\n",
    "pieDF.columns = ['mpg','cylinders','displacement','horsepower','weight', 'acceleration','model year','origin','name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "pieDF['cnt'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>displacement</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>weight</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model year</th>\n",
       "      <th>origin</th>\n",
       "      <th>name</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18.0</td>\n",
       "      <td>8</td>\n",
       "      <td>307.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>3504.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>chevrolet chevelle malibu</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15.0</td>\n",
       "      <td>8</td>\n",
       "      <td>350.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>3693.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>buick skylark 320</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.0</td>\n",
       "      <td>8</td>\n",
       "      <td>318.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>3436.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>plymouth satellite</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.0</td>\n",
       "      <td>8</td>\n",
       "      <td>304.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>3433.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>amc rebel sst</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.0</td>\n",
       "      <td>8</td>\n",
       "      <td>302.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>3449.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>ford torino</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393</th>\n",
       "      <td>27.0</td>\n",
       "      <td>4</td>\n",
       "      <td>140.0</td>\n",
       "      <td>86.00</td>\n",
       "      <td>2790.0</td>\n",
       "      <td>15.6</td>\n",
       "      <td>82</td>\n",
       "      <td>1</td>\n",
       "      <td>ford mustang gl</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>44.0</td>\n",
       "      <td>4</td>\n",
       "      <td>97.0</td>\n",
       "      <td>52.00</td>\n",
       "      <td>2130.0</td>\n",
       "      <td>24.6</td>\n",
       "      <td>82</td>\n",
       "      <td>2</td>\n",
       "      <td>vw pickup</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>32.0</td>\n",
       "      <td>4</td>\n",
       "      <td>135.0</td>\n",
       "      <td>84.00</td>\n",
       "      <td>2295.0</td>\n",
       "      <td>11.6</td>\n",
       "      <td>82</td>\n",
       "      <td>1</td>\n",
       "      <td>dodge rampage</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>28.0</td>\n",
       "      <td>4</td>\n",
       "      <td>120.0</td>\n",
       "      <td>79.00</td>\n",
       "      <td>2625.0</td>\n",
       "      <td>18.6</td>\n",
       "      <td>82</td>\n",
       "      <td>1</td>\n",
       "      <td>ford ranger</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>31.0</td>\n",
       "      <td>4</td>\n",
       "      <td>119.0</td>\n",
       "      <td>82.00</td>\n",
       "      <td>2720.0</td>\n",
       "      <td>19.4</td>\n",
       "      <td>82</td>\n",
       "      <td>1</td>\n",
       "      <td>chevy s-10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>398 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      mpg  cylinders  displacement horsepower  weight  acceleration  \\\n",
       "0    18.0          8         307.0      130.0  3504.0          12.0   \n",
       "1    15.0          8         350.0      165.0  3693.0          11.5   \n",
       "2    18.0          8         318.0      150.0  3436.0          11.0   \n",
       "3    16.0          8         304.0      150.0  3433.0          12.0   \n",
       "4    17.0          8         302.0      140.0  3449.0          10.5   \n",
       "..    ...        ...           ...        ...     ...           ...   \n",
       "393  27.0          4         140.0      86.00  2790.0          15.6   \n",
       "394  44.0          4          97.0      52.00  2130.0          24.6   \n",
       "395  32.0          4         135.0      84.00  2295.0          11.6   \n",
       "396  28.0          4         120.0      79.00  2625.0          18.6   \n",
       "397  31.0          4         119.0      82.00  2720.0          19.4   \n",
       "\n",
       "     model year  origin                       name  cnt  \n",
       "0            70       1  chevrolet chevelle malibu    1  \n",
       "1            70       1          buick skylark 320    1  \n",
       "2            70       1         plymouth satellite    1  \n",
       "3            70       1              amc rebel sst    1  \n",
       "4            70       1                ford torino    1  \n",
       "..          ...     ...                        ...  ...  \n",
       "393          82       1            ford mustang gl    1  \n",
       "394          82       2                  vw pickup    1  \n",
       "395          82       1              dodge rampage    1  \n",
       "396          82       1                ford ranger    1  \n",
       "397          82       1                 chevy s-10    1  \n",
       "\n",
       "[398 rows x 10 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pieDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>displacement</th>\n",
       "      <th>weight</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model year</th>\n",
       "      <th>origin</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cylinders</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>82.2</td>\n",
       "      <td>290.0</td>\n",
       "      <td>9594.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>302</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5974.5</td>\n",
       "      <td>22398.5</td>\n",
       "      <td>470858.0</td>\n",
       "      <td>3386.7</td>\n",
       "      <td>15723</td>\n",
       "      <td>405</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>82.1</td>\n",
       "      <td>435.0</td>\n",
       "      <td>9310.0</td>\n",
       "      <td>55.9</td>\n",
       "      <td>237</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1678.8</td>\n",
       "      <td>18324.0</td>\n",
       "      <td>268651.0</td>\n",
       "      <td>1366.1</td>\n",
       "      <td>6378</td>\n",
       "      <td>100</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1541.2</td>\n",
       "      <td>35536.0</td>\n",
       "      <td>423816.0</td>\n",
       "      <td>1334.4</td>\n",
       "      <td>7612</td>\n",
       "      <td>103</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mpg  displacement    weight  acceleration  model year  origin  \\\n",
       "cylinders                                                                     \n",
       "3            82.2         290.0    9594.0          53.0         302      12   \n",
       "4          5974.5       22398.5  470858.0        3386.7       15723     405   \n",
       "5            82.1         435.0    9310.0          55.9         237       6   \n",
       "6          1678.8       18324.0  268651.0        1366.1        6378     100   \n",
       "8          1541.2       35536.0  423816.0        1334.4        7612     103   \n",
       "\n",
       "           cnt  \n",
       "cylinders       \n",
       "3            4  \n",
       "4          204  \n",
       "5            3  \n",
       "6           84  \n",
       "8          103  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "originDF = pieDF.groupby('origin').sum()\n",
    "cylindersDF = pieDF.groupby('cylinders').sum()\n",
    "cylindersDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>displacement</th>\n",
       "      <th>weight</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model year</th>\n",
       "      <th>origin</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>cyl3</th>\n",
       "      <td>82.2</td>\n",
       "      <td>290.0</td>\n",
       "      <td>9594.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>302</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl4</th>\n",
       "      <td>5974.5</td>\n",
       "      <td>22398.5</td>\n",
       "      <td>470858.0</td>\n",
       "      <td>3386.7</td>\n",
       "      <td>15723</td>\n",
       "      <td>405</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl5</th>\n",
       "      <td>82.1</td>\n",
       "      <td>435.0</td>\n",
       "      <td>9310.0</td>\n",
       "      <td>55.9</td>\n",
       "      <td>237</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl6</th>\n",
       "      <td>1678.8</td>\n",
       "      <td>18324.0</td>\n",
       "      <td>268651.0</td>\n",
       "      <td>1366.1</td>\n",
       "      <td>6378</td>\n",
       "      <td>100</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl8</th>\n",
       "      <td>1541.2</td>\n",
       "      <td>35536.0</td>\n",
       "      <td>423816.0</td>\n",
       "      <td>1334.4</td>\n",
       "      <td>7612</td>\n",
       "      <td>103</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         mpg  displacement    weight  acceleration  model year  origin  cnt\n",
       "cyl3    82.2         290.0    9594.0          53.0         302      12    4\n",
       "cyl4  5974.5       22398.5  470858.0        3386.7       15723     405  204\n",
       "cyl5    82.1         435.0    9310.0          55.9         237       6    3\n",
       "cyl6  1678.8       18324.0  268651.0        1366.1        6378     100   84\n",
       "cyl8  1541.2       35536.0  423816.0        1334.4        7612     103  103"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "originDF.index = ['USA' , 'EU' , 'KOREA']\n",
    "cylindersDF.index = ['cyl3' , 'cyl4' , 'cyl5', 'cyl6', 'cyl8']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>displacement</th>\n",
       "      <th>weight</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model year</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>USA</th>\n",
       "      <td>5000.8</td>\n",
       "      <td>1556</td>\n",
       "      <td>61229.5</td>\n",
       "      <td>837121.0</td>\n",
       "      <td>3743.4</td>\n",
       "      <td>18827</td>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EU</th>\n",
       "      <td>1952.4</td>\n",
       "      <td>291</td>\n",
       "      <td>7640.0</td>\n",
       "      <td>169631.0</td>\n",
       "      <td>1175.1</td>\n",
       "      <td>5307</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KOREA</th>\n",
       "      <td>2405.6</td>\n",
       "      <td>324</td>\n",
       "      <td>8114.0</td>\n",
       "      <td>175477.0</td>\n",
       "      <td>1277.6</td>\n",
       "      <td>6118</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          mpg  cylinders  displacement    weight  acceleration  model year  \\\n",
       "USA    5000.8       1556       61229.5  837121.0        3743.4       18827   \n",
       "EU     1952.4        291        7640.0  169631.0        1175.1        5307   \n",
       "KOREA  2405.6        324        8114.0  175477.0        1277.6        6118   \n",
       "\n",
       "       cnt  \n",
       "USA    249  \n",
       "EU      70  \n",
       "KOREA   79  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>displacement</th>\n",
       "      <th>weight</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model year</th>\n",
       "      <th>origin</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>cyl3</th>\n",
       "      <td>82.2</td>\n",
       "      <td>290.0</td>\n",
       "      <td>9594.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>302</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl4</th>\n",
       "      <td>5974.5</td>\n",
       "      <td>22398.5</td>\n",
       "      <td>470858.0</td>\n",
       "      <td>3386.7</td>\n",
       "      <td>15723</td>\n",
       "      <td>405</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl5</th>\n",
       "      <td>82.1</td>\n",
       "      <td>435.0</td>\n",
       "      <td>9310.0</td>\n",
       "      <td>55.9</td>\n",
       "      <td>237</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl6</th>\n",
       "      <td>1678.8</td>\n",
       "      <td>18324.0</td>\n",
       "      <td>268651.0</td>\n",
       "      <td>1366.1</td>\n",
       "      <td>6378</td>\n",
       "      <td>100</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl8</th>\n",
       "      <td>1541.2</td>\n",
       "      <td>35536.0</td>\n",
       "      <td>423816.0</td>\n",
       "      <td>1334.4</td>\n",
       "      <td>7612</td>\n",
       "      <td>103</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         mpg  displacement    weight  acceleration  model year  origin  cnt\n",
       "cyl3    82.2         290.0    9594.0          53.0         302      12    4\n",
       "cyl4  5974.5       22398.5  470858.0        3386.7       15723     405  204\n",
       "cyl5    82.1         435.0    9310.0          55.9         237       6    3\n",
       "cyl6  1678.8       18324.0  268651.0        1366.1        6378     100   84\n",
       "cyl8  1541.2       35536.0  423816.0        1334.4        7612     103  103"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# display(originDF)\n",
    "# display(cylindersDF)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "\n",
    "# originDF['cnt'].plot(kind='pie' , autopct='%1.1f%%' , colors = ['gold' , 'blue' , 'red'] , shadow=True)\n",
    "\n",
    "plt.pie(originDF['cnt'].values , labels = originDF.index , colors = colors , shadow=True , autopct='%1.1f%%')\n",
    "\n",
    "plt.title('model origin')\n",
    "plt.legend(labels = originDF.index , loc='upper right')\n",
    "\n",
    "plt.axis('equal')\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10, 10))\n",
    "\n",
    "ax01 = fig.add_subplot(1,2,1)\n",
    "ax02 = fig.add_subplot(1,2,2)\n",
    "\n",
    "\n",
    "# originDF['cnt'].plot(kind='pie' , autopct='%1.1f%%' , colors = ['gold' , 'blue' , 'red'] , shadow=True)\n",
    "\n",
    "ax01.pie(originDF['cnt'].values , labels = originDF.index , colors = colors , shadow=True , autopct='%1.1f%%')\n",
    "ax02.pie(cylindersDF['cnt'].values , labels = cylindersDF.index , colors = ['gold' , 'blue' , 'red' , 'skyblue' , 'green']  , shadow=True , autopct='%1.1f%%')\n",
    "\n",
    "ax01.legend(labels = originDF.index , loc='best')\n",
    "ax02.legend(labels = cylindersDF.index , loc='best')\n",
    "\n",
    "plt.axis('equal')\n",
    "\n",
    "plt.show()\n",
    "plt.close()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- histogram : 구간에 대한 데이터 집계\n",
    "- 변수가 하나인 단변수 데이터의 빈도 수 시각화할 때"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datas = np.random.randn(1000)\n",
    "datas\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.hist(datas , bins=50)\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlsAAAEuCAYAAAC5wteeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAATZElEQVR4nO3db6xl1Xkf4N9bxoCIpx4abuoIaTpySm0g9Yf0Bkwwbm1Vxil2JagtV8Q2raivG8lRKmLkkij2RLZrCYpLIseypk0rtXUTyaARVOk/lYiATGMzJh9cgRNbMqYpqj0eQ0JgNJTw9sM9ZC7jO8yBsvY9c87zSKO5a599Zr0sLQ2/WXvtvau7AwDAGH9hpwsAAFhmwhYAwEDCFgDAQMIWAMBAwhYAwEDCFgDAQLt2uoCTOe+883rfvn07XQYAwCl99atf/V53r2332cKGrX379uXQoUM7XQYAwClV1bdP9pnLiAAAAwlbAAADCVsAAAMJWwAAAwlbAAADCVsAAAMJWwAAAwlbAAADDQ1bVfVgVb2jql5fVXdX1Zeq6paRfQIALJJhYauq3p3kNbPmbUmu7+7Lk+yrqktH9QsAsEiGhK2q2p3k/Um+kM1XAp3d3Y/MPr4jyWUj+gUAWDSj3o34a0k+meSqJLuTHNny2ZEkF273paraSLKRJHv37h1U2pLaf/VE/Rycph8AWBKv+MpWVf1Mkke7+4HZoSeS7NlyyrlJDm/33e4+0N3r3b2+trbti7MBAE4rI1a2rk3ydFX9VpIfT/K3kry+qs7v7v+d5JokvzKgXwCAhfOKh63uvur5n6tqf5Lfy+alw9ur6liSu7r74Ve6XwCARTRqz1aSpLv3b2naFA8ArBwPNQUAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGEjYAgAYaOhDTVlCU7zw2suuAVgiVrYAAAYStgAABhK2AAAGErYAAAYStgAABnI3IqtpirsqE3dWAmBlCwBgJGELAGAgYQsAYCBhCwBgIGELAGAgYQsAYCCPfmDxTPVYBgCYgJUtAICBhC0AgIGGXEasqjOT3JFkd5JKcm2StyW5Kcl3kzzT3W8f0TcAwCIZtWfr2STv7e6nq+p9Sa5L8mSSm7r7zkF9AgAsnCGXEbv7ue5+eta8IMnXkuxJ8viI/gAAFtWwPVtVdWNVfSPJepLfyeYq2s1VdV9VbZzkOxtVdaiqDh0+fHhUaQAAkxkWtrr7lu6+IMlnk/x6d3+8u9+U5Mok76mqi7f5zoHuXu/u9bW1tVGlAQBMZkjYqqrdVVWz5qNJXl1Vz+8PO5rN/Vs9om8AgEUyaoP8G5LcVlXHshmuPpzk01V1yazPg9390KC+AQAWxpCw1d0PJLn8hMM3jugLAGCReagpAMBAwhYAwEDCFgDAQMIWAMBAwhYAwEDCFgDAQMIWAMBAwhYAwECjniAP8NLtv3qCPg6O7wNgCytbAAADCVsAAAMJWwAAAwlbAAADCVsAAAMJWwAAAwlbAAADCVsAAAMJWwAAAwlbAAADCVsAAAMJWwAAA3kRNZzuvLwZYKFZ2QIAGEjYAgAYaMhlxKo6M8kdSXYnqSTXJnl1ks8lOTvJ/d1944i+AQAWyag9W88meW93P11V70tyXZIrklzf3Y9U1Rer6tLu/vKg/gEAFsKQy4jd/Vx3Pz1rXpDka0nO7u5HZsfuSHLZiL4BABbJsD1bVXVjVX0jyXqSB5Mc2fLxkSTnjuobAGBRDHv0Q3ffkuSWqvrpJJ9JsmfLx+cmOXzid6pqI8lGkuzdu3dUaTCdKR7LAMBCG7KyVVW7q6pmzUeTnJHkrKo6f3bsmiR3n/i97j7Q3evdvb62tjaiNACASY1a2XpDktuq6liSo0k+nOS8JLfPjt3V3Q8P6hsAYGEMCVvd/UCSy084/K3YFA8ArBgPNQUAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGEjYAgAYSNgCABhI2AIAGGjXiD+0qvYk+XyS12Yz0F2X5M1Jbkry3STPdPfbR/QNALBIhoStJOckuaG7H6uqq5J8JMnXk9zU3XcO6hMAYOEMuYzY3Y9192Oz5uNJnkqyZ/YzAMDKGLpnq6rOz+aq1m3ZXEW7uaruq6qNk5y/UVWHqurQ4cOHR5YGADCJYWGrqt6Z5GNJPjhb6fp4d78pyZVJ3lNVF5/4ne4+0N3r3b2+trY2qjQAgMmM2iD/xiTv6u4PbTm2q7ufTXI0yZNJekTfAACLZNQG+XckuaKq7pm1H03ynaq6ZNbnwe5+aFDfAAALY66wNdtj9e+6++g853f3zUlu/v8pDABgGcy7Z+vPktxZVbdU1b6B9QAALJW5Vra6+zeS/EZV/USSf1ZV5yT5F939u0OrA3il7b96pyt45ew/uNMVAHOY+27Eqnprkp/P5irXgSTvrarPjCoMAGAZzLtn6ytJ/nuSX+ruP5od/k9V9aVhlQEALIF570b8WJL/2t1dVbuS/ER3f6W7Lx9YGwDAaW/ey4i/2N2dJLNnZX1yXEkAAMtj3rBVJ7R3v9KFAAAso3kvI95eVf8+ye3ZfGDpfeNKAgBYHvM++uFXq+qKJJck+e3u/o9jywIAWA4v5UXU30/ylSR/XFVvGVQPAMBSmffRD19I8kNJHp4d6iT3jioKAGBZzLtn63XdfdnQSgAAltC8lxF/v6p+eGglAABLaN6VrZ9M8s2q+vqs3d39U4NqAgBYGvPejfiTowsBAFhGc11GrKo9VfVLVfXPq+qsqrpodGEAAMtg3j1b/zbJg0ku6e5jST49riQAgOUxb9g6p7v/c5JnZ22v6wEAmMO8Yes7VfV3k5xRVZcnOTqwJgCApTFv2NrI5h2Jf5rk7yX5B6MKAgBYJvPejfhUkl8eXAsAwNKZ93U9/yObr+hJkh9O8iceBwErZP/VO10BwGlr3pWtP39VT1Wdm+QfD6sIAGCJzLtn68919+PZfCk1AACnMO9lxI0tzfOT/LVTnL8nyeeTvDabge66JGcm+VySs5Pc3903vox6AQBOK/O+G/HY7PdO8pUknzrF+eckuaG7H6uqq5J8JMnrklzf3Y9U1Rer6tLu/vLLqhoA4DQxb9j6zRMPVNWZSdLdz5z4WXc/tqX5eDbD2tnd/cjs2B1JLksibAEAS23esHV/kh9N8odJfnz2+zPZXOl628m+VFXnZ3NV6+eS/OqWj44kuXCb8zey+Uyv7N27d87SAFbUFHeJ7j84vg9YcvNukP/DJBd291uzGZK+2d1v7e4XC1rvTPKxJB9M8v0ke7Z8fG6Swyd+p7sPdPd6d6+vra3NWRoAwOKaN2z9aHf/SZJ09/eS7Huxk6vqjUne1d0f6u4j3X00yVmzla4kuSbJ3S+zZgCA08a8lxG/VVUfTfJfkrw5ydOnOP8dSa6oqntm7UeT3JDk9qo6luSu7n74ZdQLAHBamTdsbST5h7Pfv53k77/Yyd19c5Kbt/nosm2OAQAsrXmfIP9sVT2c5Ils3kn4qpFFAQAsi7n2bFXVZ5O8K8mNSc5I8m9GFgUAsCzm3SB/YXd/NMlT3f1/k/zIwJoAAJbGvGHr2dmdhF1VfzHJWQNrAgBYGvOGrZ9L8q+SXJTk9mw+qBQAgFOY927EK7v7p4dWAgCwhOZd2XpLVbkDEQDgJZp3ZetVSR6qqt9P8mdJuruvHVcWAMBymDds/fzQKgBYTFO87DrxwmuW2oteRqyqX0iS7v52kr/e3d9+/tck1QEAnOZOtWfrqi0/3zCyEACAZTTvBnkAAF6GU+3Z+htVdX+SSnLRlp+7u39qeHUAAKe5Fw1b3f2aqQoBAFhGLiMCAAwkbAEADCRsAQAMJGwBAAwkbAEADCRsAQAMJGwBAAwkbAEADCRsAQAMJGwBAAw0JGxV1VpVfaqqPjFrv7+qHqqqe6rqv43oEwBgEZ3qRdQv161JvpnknFl7T5KbuvvOQf0BACykIStb3f2BJPduObQnyeMj+gIAWGRT7dnaleTmqrqvqjYm6hMAYMdNEra6++Pd/aYkVyZ5T1VdvN15VbVRVYeq6tDhw4enKA0AYKhJwlZVPb837GiSJ5P0dud194HuXu/u9bW1tSlKAwAYatQG+RN9uqoumfV3sLsfmqhfAIAdNSxsdfc9Se6Z/XzjqH4AABaZh5oCAAwkbAEADCRsAQAMJGwBAAwkbAEADCRsAQAMJGwBAAwkbAEADCRsAQAMNNXregDg5PZfPUEfB8f3AduwsgUAMJCwBQAwkLAFADCQsAUAMJCwBQAwkLAFADCQsAUAMJCwBQAwkLAFADCQsAUAMJCwBQAwkLAFADCQsAUAMJCwBQAwkLAFADDQkLBVVWtV9amq+sSs/fqquruqvlRVt4zoEwBgEY1a2bo1ybEkr5q1b0tyfXdfnmRfVV06qF8AgIUyJGx19weS3JskVbUrydnd/cjs4zuSXDaiXwCARbNrgj7WkhzZ0j6S5MLtTqyqjSQbSbJ3797xlU1l/9U7XQEAsEOm2CD/RJI9W9rnJjm83YndfaC717t7fW1tbYLSAADGGh62uvtokrOq6vzZoWuS3D26XwCARTDFZcQkuSHJ7VV1LMld3f3wRP0CAOyoYWGru+9Jcs/s5wdiUzwAsII81BQAYCBhCwBgoKn2bAHAzpriMTz7D47vg9OOlS0AgIGELQCAgYQtAICBhC0AgIGELQCAgYQtAICBhC0AgIGELQCAgYQtAICBhC0AgIGELQCAgYQtAICBhC0AgIGELQCAgYQtAICBhC0AgIGELQCAgYQtAICBhC0AgIGELQCAgYQtAICBdk3ZWVV9LcmRWfNAd/+HKfsHAJjapGEryXe6+29P3CcAwI6Z+jLicxP3BwCwoyZb2aqqH0ryY1V1b5L/k+QXuvt/nXDORpKNJNm7d+9UpQEAJ9p/9QR9HBzfxwKYbGWru5/q7h/r7rck+ZdJbt3mnAPdvd7d62tra1OVBgAwzGRhq6rO2NI8PFW/AAA7acoN8n+1qv51kmdmv352wr4BAHbEZGGru/8gyeVT9QcAsAg81BQAYCBhCwBgoKkfagoAy2uKxyUkK/PIhGVhZQsAYCBhCwBgIGELAGAgYQsAYCBhCwBgIHcjTnXnCACwkqxsAQAMJGwBAAwkbAEADCRsAQAMJGwBAAwkbAEADCRsAQAMJGwBAAwkbAEADCRsAQAMJGwBAAwkbAEADORF1ABwutl/9U5X8MqY6r9j/8Fp+jkJK1sAAAMJWwAAA00atqrqE1X1u1X1paq6eMq+AQB2wmRhq6quSPKXu/tvJvlQklum6hsAYKdMubL19iS/mSTd/T+T/KUJ+wYA2BFThq0fSXJ4S/vZqrJnDABYalM++uGPk5y7pf1cdz+39YSq2kiyMWv+aVX9wVTFvUTnJfneThexQIzHccbiOGPxQsbjOGPxQsbjuDFj8Sv1iv+R2/grJ/tgyrB1X5J3J7mvqi5K8kcnntDdB5IcmLCml6WqDnX3+k7XsSiMx3HG4jhj8ULG4zhj8ULG47hlHYspw9ZvJ/k7VXVfkiezuUkeAGCpTRa2ZpcMf3aq/gAAFoEN6i/Pwl/qnJjxOM5YHGcsXsh4HGcsXsh4HLeUY1HdvdM1AAAsLStbAAADTblB/rRVVWtJ/kk2H1fxy1X1+iSfS3J2kvu7+8adrG9K24zF+5PclOS7SZ7p7rfvZH1Tqqo9ST6f5LXZ/IfLdUnOzArOjZOMxZuzunPjzCR3JNmdpJJcm+TVWcG5kZx0PN6WFZ0fSVJVDyb5xSTfyorOi622jMdalnBeCFvzuTXJN5OcM2vfluT67n6kqr5YVZd295d3rLppnTgWe5Lc1N137lhFO+ecJDd092NVdVWSjyR5XVZzbmw3Fl/P6s6NZ5O8t7ufrqr3ZTN8XpHVnBvJ9uPxZFZ0flTVu5O8Zta8Las7L5L8wHjsyRLOC5cR59DdH0hyb5JU1a4kZ3f3I7OP70hy2Q6VNrmtYzGzJ8njO1PNzurux7r7sVnz8STHsqJzY5uxeCqrPTee6+6nZ80LknwtKzo3kpOOx56s4Pyoqt1J3p/kC9lc8FjZeZH8wHgkSzovhK2Xbi3JkS3tI3nhk/FXza4kN1fVfbM3AKycqjo/mys5t2bF58aWsbgtKz43qurGqvpGkvUkD8bc2Doev5PVnR+/luSTSZ7L5mXVlZ4XeeF4JEs6L4Stl+6JbCbv552bF77zcaV098e7+01Jrkzynqq6eKdrmlJVvTPJx5J8MMn3s8JzY+tYzFa6VnpudPct3X1Bks8m+UxWeG4kPzAev76K86OqfibJo939wOzQE1nhebHNeCzt/1OErZeou48mOWv2L/gkuSbJ3TtY0o6aXVZNkqPZ3IOxMs8Sqao3JnlXd3+ou4+s8tw4cSxmx1Z5buyuqudfxvZokjOyonMj2XY8Xr2i8+PaJBdV1W9l8/V1H01y8arOi/zgePzT2Q1oyZLNCxvkX54bktxeVceS3NXdD+90QTvo01V1STbn0sHufminC5rQO5JcUVX3zNqPZnXnxnZj8Z0VnhtvSHLbbB4cTfLhbL5gdxXnRrL9eKzc3x3dfdXzP1fV/iS/l81Lhys5L04yHv9oGeeFh5oCAAzkMiIAwEDCFgDAQMIWAMBAwhYAwEDCFgDAQMIWAMBAwhYAwEDCFgDAQP8PatsP/qJyAcQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "\n",
    "pieDF['mpg'].plot(kind='hist' , bins=20 , color='coral' , figsize=(10, 5))\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### koweps_visualization.xlsx [실습]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>h12_id</th>\n",
       "      <th>h12_ind</th>\n",
       "      <th>h12_sn</th>\n",
       "      <th>h12_merkey</th>\n",
       "      <th>h_new</th>\n",
       "      <th>h12_cobf</th>\n",
       "      <th>p12_wgl</th>\n",
       "      <th>p12_wsl</th>\n",
       "      <th>p12_wgc</th>\n",
       "      <th>p12_wsc</th>\n",
       "      <th>...</th>\n",
       "      <th>da12_326</th>\n",
       "      <th>da12_327</th>\n",
       "      <th>da12_328</th>\n",
       "      <th>da12_6aq14</th>\n",
       "      <th>da12_6aq15</th>\n",
       "      <th>h12_pers_income1</th>\n",
       "      <th>h12_pers_income2</th>\n",
       "      <th>h12_pers_income3</th>\n",
       "      <th>h12_pers_income4</th>\n",
       "      <th>h12_pers_income5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10101</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>953.482054</td>\n",
       "      <td>0.286943</td>\n",
       "      <td>948.140524</td>\n",
       "      <td>0.285336</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20101</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1238.891352</td>\n",
       "      <td>0.372835</td>\n",
       "      <td>1238.891352</td>\n",
       "      <td>0.372835</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>30101</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1282.051947</td>\n",
       "      <td>0.385824</td>\n",
       "      <td>1282.051947</td>\n",
       "      <td>0.385824</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>40101</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1066.327201</td>\n",
       "      <td>0.320903</td>\n",
       "      <td>1066.327201</td>\n",
       "      <td>0.320903</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3418.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>40101</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1390.617192</td>\n",
       "      <td>0.418496</td>\n",
       "      <td>1382.826774</td>\n",
       "      <td>0.416151</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15417</th>\n",
       "      <td>9800</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>98000701</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>735.488155</td>\n",
       "      <td>0.221339</td>\n",
       "      <td>735.488155</td>\n",
       "      <td>0.221339</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>979.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15418</th>\n",
       "      <td>9800</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>98000701</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>898.395613</td>\n",
       "      <td>0.270365</td>\n",
       "      <td>898.395613</td>\n",
       "      <td>0.270365</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15419</th>\n",
       "      <td>9800</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>98000701</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2686.353997</td>\n",
       "      <td>0.808438</td>\n",
       "      <td>2676.190322</td>\n",
       "      <td>0.805379</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>868.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15420</th>\n",
       "      <td>9800</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>98000701</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>841.651153</td>\n",
       "      <td>0.253288</td>\n",
       "      <td>841.651153</td>\n",
       "      <td>0.253288</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>518.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15421</th>\n",
       "      <td>9800</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>98000701</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>643.650245</td>\n",
       "      <td>0.193702</td>\n",
       "      <td>643.650245</td>\n",
       "      <td>0.193702</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15422 rows × 1191 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       h12_id  h12_ind  h12_sn  h12_merkey  h_new  h12_cobf      p12_wgl  \\\n",
       "0           1        1       1       10101      0       NaN   953.482054   \n",
       "1           2        1       1       20101      0       NaN  1238.891352   \n",
       "2           3        1       1       30101      0       NaN  1282.051947   \n",
       "3           4        1       1       40101      0       NaN  1066.327201   \n",
       "4           4        1       1       40101      0       NaN  1390.617192   \n",
       "...       ...      ...     ...         ...    ...       ...          ...   \n",
       "15417    9800        7       1    98000701      1       NaN   735.488155   \n",
       "15418    9800        7       1    98000701      1       NaN   898.395613   \n",
       "15419    9800        7       1    98000701      1       NaN  2686.353997   \n",
       "15420    9800        7       1    98000701      1       NaN   841.651153   \n",
       "15421    9800        7       1    98000701      1       NaN   643.650245   \n",
       "\n",
       "        p12_wsl      p12_wgc   p12_wsc  ...  da12_326  da12_327  da12_328  \\\n",
       "0      0.286943   948.140524  0.285336  ...       NaN       NaN       NaN   \n",
       "1      0.372835  1238.891352  0.372835  ...       NaN       NaN       NaN   \n",
       "2      0.385824  1282.051947  0.385824  ...       NaN       NaN       NaN   \n",
       "3      0.320903  1066.327201  0.320903  ...       NaN       NaN       NaN   \n",
       "4      0.418496  1382.826774  0.416151  ...       NaN       NaN       NaN   \n",
       "...         ...          ...       ...  ...       ...       ...       ...   \n",
       "15417  0.221339   735.488155  0.221339  ...       NaN       NaN       NaN   \n",
       "15418  0.270365   898.395613  0.270365  ...       NaN       NaN       NaN   \n",
       "15419  0.808438  2676.190322  0.805379  ...       NaN       NaN       NaN   \n",
       "15420  0.253288   841.651153  0.253288  ...       NaN       NaN       NaN   \n",
       "15421  0.193702   643.650245  0.193702  ...       NaN       NaN       NaN   \n",
       "\n",
       "       da12_6aq14  da12_6aq15  h12_pers_income1  h12_pers_income2  \\\n",
       "0             NaN         NaN               NaN               NaN   \n",
       "1             NaN         NaN               NaN               NaN   \n",
       "2             NaN         NaN               NaN               NaN   \n",
       "3             NaN         NaN               NaN            3418.0   \n",
       "4             NaN         NaN               NaN               NaN   \n",
       "...           ...         ...               ...               ...   \n",
       "15417         NaN         NaN               NaN             979.0   \n",
       "15418         NaN         NaN               NaN               NaN   \n",
       "15419         NaN         NaN               NaN             868.0   \n",
       "15420         NaN         NaN               NaN             518.0   \n",
       "15421         NaN         NaN               NaN               NaN   \n",
       "\n",
       "       h12_pers_income3  h12_pers_income4  h12_pers_income5  \n",
       "0                   NaN                 0               NaN  \n",
       "1                   NaN                 0               NaN  \n",
       "2                   NaN                 0               NaN  \n",
       "3                   NaN                 0               NaN  \n",
       "4                   NaN                 0               NaN  \n",
       "...                 ...               ...               ...  \n",
       "15417               NaN                 0               NaN  \n",
       "15418               NaN                 0               NaN  \n",
       "15419               NaN                 0               NaN  \n",
       "15420               NaN                 0               NaN  \n",
       "15421               NaN                 0               NaN  \n",
       "\n",
       "[15422 rows x 1191 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rowDF = pd.read_excel('./data/koweps_visualization.xlsx')\n",
    "rowDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 15422 entries, 0 to 15421\n",
      "Columns: 1191 entries, h12_id to h12_pers_income5\n",
      "dtypes: float64(999), int64(191), object(1)\n",
      "memory usage: 140.1+ MB\n"
     ]
    }
   ],
   "source": [
    "rowDF.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 67,
     "metadata": {
      "image/png": {
       "width": 700
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image('c:/numpy_img/koweps_img.png', width = 700)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>성별</th>\n",
       "      <th>태어난 연도</th>\n",
       "      <th>혼인상태</th>\n",
       "      <th>종교</th>\n",
       "      <th>직종</th>\n",
       "      <th>일한달의 월 평균 임금</th>\n",
       "      <th>7개 권역별 지역구분</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1945</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1948</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1942</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>762.0</td>\n",
       "      <td>108.9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1923</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15417</th>\n",
       "      <td>2</td>\n",
       "      <td>1967</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>952.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15418</th>\n",
       "      <td>2</td>\n",
       "      <td>1992</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15419</th>\n",
       "      <td>1</td>\n",
       "      <td>1995</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>521.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15420</th>\n",
       "      <td>2</td>\n",
       "      <td>1998</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>432.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15421</th>\n",
       "      <td>1</td>\n",
       "      <td>2001</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15422 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       성별  태어난 연도  혼인상태  종교     직종  일한달의 월 평균 임금  7개 권역별 지역구분\n",
       "0       2    1936     2   2    NaN           NaN            1\n",
       "1       2    1945     2   2    NaN           NaN            1\n",
       "2       1    1948     2   2    NaN           NaN            1\n",
       "3       1    1942     3   1  762.0         108.9            1\n",
       "4       2    1923     2   1    NaN           NaN            1\n",
       "...    ..     ...   ...  ..    ...           ...          ...\n",
       "15417   2    1967     1   1  952.0           NaN            5\n",
       "15418   2    1992     5   1    NaN           NaN            5\n",
       "15419   1    1995     5   1  521.0          72.0            5\n",
       "15420   2    1998     5   1  432.0           NaN            5\n",
       "15421   1    2001     0   1    NaN           NaN            5\n",
       "\n",
       "[15422 rows x 7 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 문제 01]\n",
    "subsetDF = rowDF[['h12_g3', 'h12_g4', 'h12_g10', 'h12_g11', 'h12_eco9', 'p1202_8aq1', 'h12_reg7']] \n",
    "subsetDF.columns = ['성별', '태어난 연도', '혼인상태', '종교', '직종', '일한달의 월 평균 임금', '7개 권역별 지역구분']\n",
    "subsetDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 데이터 분석 (조사 대상자들에 대한 성별 분포)\n",
    "\n",
    "# 성별의 데이터 분포 확인\n",
    "# display(subsetDF.filter(['성별']))\n",
    "genderDF = subsetDF.filter(['성별'])\n",
    "\n",
    "genderDF['성별2'] = np.where(subsetDF.filter(['성별']) == 1 , '남자' , '여자')\n",
    "genderDF\n",
    "\n",
    "# 결측값 확인\n",
    "# genderDF.isna().sum()\n",
    "\n",
    "gender_cnt_df = pd.DataFrame( genderDF['성별2'].value_counts() )\n",
    "gender_cnt_df\n",
    "\n",
    "# 컬럼이름 변경 rename()\n",
    "\n",
    "gender_cnt_df.rename(columns={'성별2' : '명'} , inplace=True)\n",
    "gender_cnt_df\n",
    "\n",
    "# 성별을 비율순으로 정렬\n",
    "gender_cnt_df.sort_values('명' , ascending=True , inplace=True)\n",
    "gender_cnt_df\n",
    "\n",
    "# 데이터 시각화 (bar)\n",
    "plt.figure()\n",
    "plt.grid()\n",
    "\n",
    "gender_cnt_df.plot.bar(rot=0)\n",
    "\n",
    "plt.title('성별 분포')\n",
    "plt.xlabel('성별')\n",
    "plt.ylabel('명')\n",
    "\n",
    "for idx , value in enumerate(list(gender_cnt_df['명'])) :\n",
    "    txt = '%d명' % value\n",
    "    plt.text(idx , value , txt , \n",
    "             horizontalalignment = 'center' , \n",
    "             verticalalignment = 'bottom' ,\n",
    "             color = 'red')\n",
    "    \n",
    "plt.show()\n",
    "plt.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# pie char 로 만들어 보자\n",
    "plt.figure()\n",
    "\n",
    "gender_cnt_df['명'].plot.pie(labels=  gender_cnt_df.index , \n",
    "                       autopct='%1.1f%%' , \n",
    "                       colors = ['gold' , 'blue' ] , shadow=True , legend=True)\n",
    "    \n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>성별</th>\n",
       "      <th>태어난 연도</th>\n",
       "      <th>혼인상태</th>\n",
       "      <th>종교</th>\n",
       "      <th>직종</th>\n",
       "      <th>일한달의 월 평균 임금</th>\n",
       "      <th>7개 권역별 지역구분</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1945</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1948</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1942</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>762.0</td>\n",
       "      <td>108.9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1923</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15417</th>\n",
       "      <td>2</td>\n",
       "      <td>1967</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>952.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15418</th>\n",
       "      <td>2</td>\n",
       "      <td>1992</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15419</th>\n",
       "      <td>1</td>\n",
       "      <td>1995</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>521.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15420</th>\n",
       "      <td>2</td>\n",
       "      <td>1998</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>432.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15421</th>\n",
       "      <td>1</td>\n",
       "      <td>2001</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15422 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       성별  태어난 연도  혼인상태  종교     직종  일한달의 월 평균 임금  7개 권역별 지역구분\n",
       "0       2    1936     2   2    NaN           NaN            1\n",
       "1       2    1945     2   2    NaN           NaN            1\n",
       "2       1    1948     2   2    NaN           NaN            1\n",
       "3       1    1942     3   1  762.0         108.9            1\n",
       "4       2    1923     2   1    NaN           NaN            1\n",
       "...    ..     ...   ...  ..    ...           ...          ...\n",
       "15417   2    1967     1   1  952.0           NaN            5\n",
       "15418   2    1992     5   1    NaN           NaN            5\n",
       "15419   1    1995     5   1  521.0          72.0            5\n",
       "15420   2    1998     5   1  432.0           NaN            5\n",
       "15421   1    2001     0   1    NaN           NaN            5\n",
       "\n",
       "[15422 rows x 7 columns]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsetDF"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 문제2]\n",
    "### 성별에 따른 평균 급여 차이를 분석\n",
    "- 성별과 월급 데이터만 추출\n",
    "- 성별을 남자와 여자 변경\n",
    "- 데이터 정제(결측값 확인, 제거)\n",
    "- 데이터 분석(성별로 그룹화 그룹별 평균)\n",
    "- 데이터 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "성별                  0\n",
      "일한달의 월 평균 임금    10915\n",
      "dtype: int64\n",
      "**************************************************\n",
      "성별              0\n",
      "일한달의 월 평균 임금    0\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>일한달의 월 평균 임금</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>성별</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>남자</th>\n",
       "      <td>333.422185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>여자</th>\n",
       "      <td>176.359967</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    일한달의 월 평균 임금\n",
       "성별              \n",
       "남자    333.422185\n",
       "여자    176.359967"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 성별과 월급 데이터만 추출\n",
    "gender_salary_df = subsetDF.filter(['성별', '일한달의 월 평균 임금'])\n",
    "# gender_salary_df.head()\n",
    "\n",
    "# 성별을 남자와 여자로 변환\n",
    "gender_salary_df['성별'] = np.where(gender_salary_df['성별'] == 1 , '남자' , '여자')\n",
    "# gender_salary_df.head()\n",
    "\n",
    "# 데이터 정제(결측값 확인, 결측값 제거, 이상치 결측 처리)\n",
    "print(gender_salary_df.isna().sum())\n",
    "gender_salary_df.dropna(inplace = True)\n",
    "print(\"*\" * 50)\n",
    "print(gender_salary_df.isna().sum())\n",
    "\n",
    "# 이상치 결측 처리\n",
    "# 급여 범위를 벗어나면 nan 대체하고 결측치 처리 ~\n",
    "gender_salary_df['일한달의 월 평균 임금'] = np.where(\n",
    "    ((gender_salary_df['일한달의 월 평균 임금'] < 1) | ( gender_salary_df['일한달의 월 평균 임금'] > 9998)) ,\n",
    "    np.nan , gender_salary_df['일한달의 월 평균 임금'] )\n",
    "gender_salary_df.head()\n",
    "\n",
    "# 데이터 분석(성별로 그룹화하여 그룹별 평균)\n",
    "gender_salary_mean_df = gender_salary_df.groupby('성별').mean()\n",
    "gender_salary_mean_df.head()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 성별에 평균 급여 차이 분석 시각화\n",
    "gender_salary_mean_df.plot.bar(rot=0)\n",
    "plt.grid()\n",
    "plt.title('성별에 평균 급여 차이 분석 시각화')\n",
    "plt.xlabel('성별')\n",
    "plt.ylabel('급여')\n",
    "\n",
    "\n",
    "for idx, value in enumerate(list( gender_salary_mean_df['일한달의 월 평균 임금'] )) :\n",
    "    txt = '%d만원' % value\n",
    "    plt.text(idx, value, txt , \n",
    "            horizontalalignment='center',\n",
    "            verticalalignment='bottom',\n",
    "            fontsize=10,\n",
    "            color='red')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 문제3]\n",
    "- 나이에 따른 평균 급여 변화\n",
    "- 데이터 전처리(태어난 년도, 월급에 대한 컬럼 추출, 나이를 계산하여 파생변수 추가)\n",
    "- 데이터 정제(결측값 확인, 결측값 제거, 이상치 결측 처리)\n",
    "- 데이터 분석(나이별 따른 급여평균)\n",
    "- 데이터 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 문제]\n",
    "- 연령대에 따른 분포\n",
    "- 연령대별 평균 급여 변화\n",
    "- 성별과 연령대 분포\n",
    "- 성별과 연령대에 따른 평균 급여 변화\n",
    "- 지역별 연령층 분포와 연령층별 지역 비율\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>성별</th>\n",
       "      <th>태어난 연도</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>여자</td>\n",
       "      <td>1936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>여자</td>\n",
       "      <td>1945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>남자</td>\n",
       "      <td>1948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>남자</td>\n",
       "      <td>1942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>여자</td>\n",
       "      <td>1923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15417</th>\n",
       "      <td>여자</td>\n",
       "      <td>1967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15418</th>\n",
       "      <td>여자</td>\n",
       "      <td>1992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15419</th>\n",
       "      <td>남자</td>\n",
       "      <td>1995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15420</th>\n",
       "      <td>여자</td>\n",
       "      <td>1998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15421</th>\n",
       "      <td>남자</td>\n",
       "      <td>2001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15422 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       성별  태어난 연도\n",
       "0      여자    1936\n",
       "1      여자    1945\n",
       "2      남자    1948\n",
       "3      남자    1942\n",
       "4      여자    1923\n",
       "...    ..     ...\n",
       "15417  여자    1967\n",
       "15418  여자    1992\n",
       "15419  남자    1995\n",
       "15420  여자    1998\n",
       "15421  남자    2001\n",
       "\n",
       "[15422 rows x 2 columns]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_year_df = subsetDF.filter(['성별' , '태어난 연도'])\n",
    "\n",
    "gender_year_df['성별'] = np.where(gender_year_df['성별'] == 1 , '남자' , '여자')\n",
    "gender_year_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>성별</th>\n",
       "      <th>태어난 연도</th>\n",
       "      <th>연령대</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>여자</td>\n",
       "      <td>1936</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>여자</td>\n",
       "      <td>1945</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>남자</td>\n",
       "      <td>1948</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>남자</td>\n",
       "      <td>1942</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>여자</td>\n",
       "      <td>1923</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15417</th>\n",
       "      <td>여자</td>\n",
       "      <td>1967</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15418</th>\n",
       "      <td>여자</td>\n",
       "      <td>1992</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15419</th>\n",
       "      <td>남자</td>\n",
       "      <td>1995</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15420</th>\n",
       "      <td>여자</td>\n",
       "      <td>1998</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15421</th>\n",
       "      <td>남자</td>\n",
       "      <td>2001</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15422 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       성별  태어난 연도  연령대\n",
       "0      여자    1936   80\n",
       "1      여자    1945   70\n",
       "2      남자    1948   70\n",
       "3      남자    1942   80\n",
       "4      여자    1923   90\n",
       "...    ..     ...  ...\n",
       "15417  여자    1967   50\n",
       "15418  여자    1992   30\n",
       "15419  남자    1995   20\n",
       "15420  여자    1998   20\n",
       "15421  남자    2001   20\n",
       "\n",
       "[15422 rows x 3 columns]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 연령대 계산\n",
    "import datetime as t\n",
    "\n",
    "gender_year_df['연령대'] = (t.datetime.now().year - gender_year_df['태어난 연도'] +1) // 10 * 10\n",
    "gender_year_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 이상치 정제"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "234\n",
      "12\n"
     ]
    }
   ],
   "source": [
    "xls = pd.ExcelFile('./data/car_mpg.xlsx')\n",
    "dataDF = xls.parse(xls.sheet_names[0])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 234 entries, 0 to 233\n",
      "Data columns (total 12 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   Unnamed: 0    234 non-null    int64  \n",
      " 1   manufacturer  234 non-null    object \n",
      " 2   model         234 non-null    object \n",
      " 3   displ         234 non-null    float64\n",
      " 4   year          234 non-null    int64  \n",
      " 5   cyl           234 non-null    int64  \n",
      " 6   trans         234 non-null    object \n",
      " 7   drv           234 non-null    object \n",
      " 8   cty           234 non-null    int64  \n",
      " 9   hwy           234 non-null    int64  \n",
      " 10  fl            234 non-null    object \n",
      " 11  class         234 non-null    object \n",
      "dtypes: float64(1), int64(5), object(6)\n",
      "memory usage: 22.1+ KB\n"
     ]
    }
   ],
   "source": [
    "dataDF.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "outlierDF = dataDF.filter(['cty' , 'hwy'])\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "outlierDF.boxplot()\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cty    19.0\n",
       "hwy    27.0\n",
       "Name: 0.75, dtype: float64"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 분위수의 정보를 얻고자 한다면?\n",
    "quantile75 = outlierDF.quantile(q=0.75)\n",
    "quantile75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cty    14.0\n",
       "hwy    18.0\n",
       "Name: 0.25, dtype: float64"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quantile25 = outlierDF.quantile(q=0.25)\n",
    "quantile25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cty    5.0\n",
       "hwy    9.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# IQR(InterQuartile Range)\n",
    "# Median\n",
    "iqr = quantile75 - quantile25\n",
    "iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lower_fence :\n",
      "  cty    6.5\n",
      "hwy    4.5\n",
      "dtype: float64\n",
      "upper_fence :\n",
      "  cty    26.5\n",
      "hwy    40.5\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# lower fence(최저 한계치)\n",
    "# upper fence(최고 한계치)\n",
    "\n",
    "lower_fence = quantile25 - 1.5 * iqr\n",
    "print('lower_fence :\\n ' , lower_fence)\n",
    "\n",
    "upper_fence = quantile75 + 1.5 * iqr\n",
    "print('upper_fence :\\n ' , upper_fence)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lower_outlier :\n",
      "  cty     9\n",
      "hwy    12\n",
      "dtype: int64\n",
      "upper_outlier :\n",
      "  cty    26.0\n",
      "hwy    37.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 극단치 경계 값을(아래 수평선)\n",
    "lower_outlier = outlierDF[ outlierDF > lower_fence ].min()\n",
    "print('lower_outlier :\\n ' , lower_outlier)\n",
    "\n",
    "# 극단치 경계 값을(위 수평선)\n",
    "upper_outlier = outlierDF[ outlierDF < upper_fence ].max()\n",
    "print('upper_outlier :\\n ' , upper_outlier)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>model</th>\n",
       "      <th>displ</th>\n",
       "      <th>year</th>\n",
       "      <th>cyl</th>\n",
       "      <th>trans</th>\n",
       "      <th>drv</th>\n",
       "      <th>cty</th>\n",
       "      <th>hwy</th>\n",
       "      <th>fl</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>213</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>jetta</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>33</td>\n",
       "      <td>44</td>\n",
       "      <td>d</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>222</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>new beetle</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>35</td>\n",
       "      <td>44</td>\n",
       "      <td>d</td>\n",
       "      <td>subcompact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>223</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>new beetle</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(l4)</td>\n",
       "      <td>f</td>\n",
       "      <td>29</td>\n",
       "      <td>41</td>\n",
       "      <td>d</td>\n",
       "      <td>subcompact</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0 manufacturer       model  displ  year  cyl       trans drv  \\\n",
       "212         213   volkswagen       jetta    1.9  1999    4  manual(m5)   f   \n",
       "221         222   volkswagen  new beetle    1.9  1999    4  manual(m5)   f   \n",
       "222         223   volkswagen  new beetle    1.9  1999    4    auto(l4)   f   \n",
       "\n",
       "     cty  hwy fl       class  \n",
       "212   33   44  d     compact  \n",
       "221   35   44  d  subcompact  \n",
       "222   29   41  d  subcompact  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>model</th>\n",
       "      <th>displ</th>\n",
       "      <th>year</th>\n",
       "      <th>cyl</th>\n",
       "      <th>trans</th>\n",
       "      <th>drv</th>\n",
       "      <th>cty</th>\n",
       "      <th>hwy</th>\n",
       "      <th>fl</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>honda</td>\n",
       "      <td>civic</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>28</td>\n",
       "      <td>33</td>\n",
       "      <td>r</td>\n",
       "      <td>subcompact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>197</td>\n",
       "      <td>toyota</td>\n",
       "      <td>corolla</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>28</td>\n",
       "      <td>37</td>\n",
       "      <td>r</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>213</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>jetta</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>33</td>\n",
       "      <td>44</td>\n",
       "      <td>d</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>222</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>new beetle</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>35</td>\n",
       "      <td>44</td>\n",
       "      <td>d</td>\n",
       "      <td>subcompact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>223</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>new beetle</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(l4)</td>\n",
       "      <td>f</td>\n",
       "      <td>29</td>\n",
       "      <td>41</td>\n",
       "      <td>d</td>\n",
       "      <td>subcompact</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0 manufacturer       model  displ  year  cyl       trans drv  \\\n",
       "99          100        honda       civic    1.6  1999    4  manual(m5)   f   \n",
       "196         197       toyota     corolla    1.8  2008    4  manual(m5)   f   \n",
       "212         213   volkswagen       jetta    1.9  1999    4  manual(m5)   f   \n",
       "221         222   volkswagen  new beetle    1.9  1999    4  manual(m5)   f   \n",
       "222         223   volkswagen  new beetle    1.9  1999    4    auto(l4)   f   \n",
       "\n",
       "     cty  hwy fl       class  \n",
       "99    28   33  r  subcompact  \n",
       "196   28   37  r     compact  \n",
       "212   33   44  d     compact  \n",
       "221   35   44  d  subcompact  \n",
       "222   29   41  d  subcompact  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# hwy 연비의 이상치 데이터 추출\n",
    "hwy_outlier_df = dataDF.query( 'hwy > ' + str(upper_outlier['hwy']))\n",
    "display( hwy_outlier_df )\n",
    "\n",
    "\n",
    "cty_outlier_df = dataDF.query( 'cty  > '  + str(upper_outlier['cty']))\n",
    "display( cty_outlier_df )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>model</th>\n",
       "      <th>displ</th>\n",
       "      <th>year</th>\n",
       "      <th>cyl</th>\n",
       "      <th>trans</th>\n",
       "      <th>drv</th>\n",
       "      <th>cty</th>\n",
       "      <th>hwy</th>\n",
       "      <th>fl</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(l5)</td>\n",
       "      <td>f</td>\n",
       "      <td>18.0</td>\n",
       "      <td>29</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>21.0</td>\n",
       "      <td>29</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m6)</td>\n",
       "      <td>f</td>\n",
       "      <td>20.0</td>\n",
       "      <td>31</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(av)</td>\n",
       "      <td>f</td>\n",
       "      <td>21.0</td>\n",
       "      <td>30</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>6</td>\n",
       "      <td>auto(l5)</td>\n",
       "      <td>f</td>\n",
       "      <td>16.0</td>\n",
       "      <td>26</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>230</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(s6)</td>\n",
       "      <td>f</td>\n",
       "      <td>19.0</td>\n",
       "      <td>28</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>231</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m6)</td>\n",
       "      <td>f</td>\n",
       "      <td>21.0</td>\n",
       "      <td>29</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>232</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>6</td>\n",
       "      <td>auto(l5)</td>\n",
       "      <td>f</td>\n",
       "      <td>16.0</td>\n",
       "      <td>26</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>233</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>6</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>18.0</td>\n",
       "      <td>26</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>234</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2008</td>\n",
       "      <td>6</td>\n",
       "      <td>auto(s6)</td>\n",
       "      <td>f</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>234 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0 manufacturer   model  displ  year  cyl       trans drv   cty  \\\n",
       "0             1         audi      a4    1.8  1999    4    auto(l5)   f  18.0   \n",
       "1             2         audi      a4    1.8  1999    4  manual(m5)   f  21.0   \n",
       "2             3         audi      a4    2.0  2008    4  manual(m6)   f  20.0   \n",
       "3             4         audi      a4    2.0  2008    4    auto(av)   f  21.0   \n",
       "4             5         audi      a4    2.8  1999    6    auto(l5)   f  16.0   \n",
       "..          ...          ...     ...    ...   ...  ...         ...  ..   ...   \n",
       "229         230   volkswagen  passat    2.0  2008    4    auto(s6)   f  19.0   \n",
       "230         231   volkswagen  passat    2.0  2008    4  manual(m6)   f  21.0   \n",
       "231         232   volkswagen  passat    2.8  1999    6    auto(l5)   f  16.0   \n",
       "232         233   volkswagen  passat    2.8  1999    6  manual(m5)   f  18.0   \n",
       "233         234   volkswagen  passat    3.6  2008    6    auto(s6)   f  17.0   \n",
       "\n",
       "     hwy fl    class  \n",
       "0     29  p  compact  \n",
       "1     29  p  compact  \n",
       "2     31  p  compact  \n",
       "3     30  p  compact  \n",
       "4     26  p  compact  \n",
       "..   ... ..      ...  \n",
       "229   28  p  midsize  \n",
       "230   29  p  midsize  \n",
       "231   26  p  midsize  \n",
       "232   26  p  midsize  \n",
       "233   26  p  midsize  \n",
       "\n",
       "[234 rows x 12 columns]"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# cty_outlier_clean_df = cty_outlier_df.copy()\n",
    "outlier_clean_df = dataDF.copy() \n",
    "# 도시 연비에 대한 이상치를 결측값으로 변경\n",
    "for idx in cty_outlier_df.index :\n",
    "    outlier_clean_df.loc[idx , 'cty'] = np.nan\n",
    "outlier_clean_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>model</th>\n",
       "      <th>displ</th>\n",
       "      <th>year</th>\n",
       "      <th>cyl</th>\n",
       "      <th>trans</th>\n",
       "      <th>drv</th>\n",
       "      <th>cty</th>\n",
       "      <th>hwy</th>\n",
       "      <th>fl</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(l5)</td>\n",
       "      <td>f</td>\n",
       "      <td>18.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>21.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m6)</td>\n",
       "      <td>f</td>\n",
       "      <td>20.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(av)</td>\n",
       "      <td>f</td>\n",
       "      <td>21.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>audi</td>\n",
       "      <td>a4</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>6</td>\n",
       "      <td>auto(l5)</td>\n",
       "      <td>f</td>\n",
       "      <td>16.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>p</td>\n",
       "      <td>compact</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>230</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>auto(s6)</td>\n",
       "      <td>f</td>\n",
       "      <td>19.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>231</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>4</td>\n",
       "      <td>manual(m6)</td>\n",
       "      <td>f</td>\n",
       "      <td>21.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>232</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>6</td>\n",
       "      <td>auto(l5)</td>\n",
       "      <td>f</td>\n",
       "      <td>16.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>233</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1999</td>\n",
       "      <td>6</td>\n",
       "      <td>manual(m5)</td>\n",
       "      <td>f</td>\n",
       "      <td>18.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>234</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>passat</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2008</td>\n",
       "      <td>6</td>\n",
       "      <td>auto(s6)</td>\n",
       "      <td>f</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>p</td>\n",
       "      <td>midsize</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>234 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0 manufacturer   model  displ  year  cyl       trans drv   cty  \\\n",
       "0             1         audi      a4    1.8  1999    4    auto(l5)   f  18.0   \n",
       "1             2         audi      a4    1.8  1999    4  manual(m5)   f  21.0   \n",
       "2             3         audi      a4    2.0  2008    4  manual(m6)   f  20.0   \n",
       "3             4         audi      a4    2.0  2008    4    auto(av)   f  21.0   \n",
       "4             5         audi      a4    2.8  1999    6    auto(l5)   f  16.0   \n",
       "..          ...          ...     ...    ...   ...  ...         ...  ..   ...   \n",
       "229         230   volkswagen  passat    2.0  2008    4    auto(s6)   f  19.0   \n",
       "230         231   volkswagen  passat    2.0  2008    4  manual(m6)   f  21.0   \n",
       "231         232   volkswagen  passat    2.8  1999    6    auto(l5)   f  16.0   \n",
       "232         233   volkswagen  passat    2.8  1999    6  manual(m5)   f  18.0   \n",
       "233         234   volkswagen  passat    3.6  2008    6    auto(s6)   f  17.0   \n",
       "\n",
       "      hwy fl    class  \n",
       "0    29.0  p  compact  \n",
       "1    29.0  p  compact  \n",
       "2    31.0  p  compact  \n",
       "3    30.0  p  compact  \n",
       "4    26.0  p  compact  \n",
       "..    ... ..      ...  \n",
       "229  28.0  p  midsize  \n",
       "230  29.0  p  midsize  \n",
       "231  26.0  p  midsize  \n",
       "232  26.0  p  midsize  \n",
       "233  26.0  p  midsize  \n",
       "\n",
       "[234 rows x 12 columns]"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# hwy_outlier_clean_df = hwy_outlier_df.copy()\n",
    "# 도시 연비에 대한 이상치를 결측값으로 변경\n",
    "for idx in hwy_outlier_df.index :\n",
    "    outlier_clean_df.loc[idx , 'hwy'] = np.nan\n",
    "outlier_clean_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cty    5\n",
       "hwy    3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier_clean_df.filter(['cty' , 'hwy']).isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cty</th>\n",
       "      <th>hwy</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>drv</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.330097</td>\n",
       "      <td>19.174757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f</th>\n",
       "      <td>19.445545</td>\n",
       "      <td>27.584158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r</th>\n",
       "      <td>14.080000</td>\n",
       "      <td>21.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           cty        hwy\n",
       "drv                      \n",
       "4    14.330097  19.174757\n",
       "f    19.445545  27.584158\n",
       "r    14.080000  21.000000"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 제거\n",
    "resultDF = outlier_clean_df.filter(['drv' , 'cty' , 'hwy']).dropna().groupby('drv').mean()\n",
    "resultDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "\n",
    "resultDF.plot.bar(rot=0)\n",
    "plt.grid()\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "outlier_clean_df.filter(['cty' , 'hwy']).boxplot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
